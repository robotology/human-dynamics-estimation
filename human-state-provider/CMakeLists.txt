cmake_minimum_required(VERSION 3.1)

project(human-state-provider CXX)

set(CMAKE_CXX_EXTENSIONS OFF)

## Find packages
find_package(YARP_experimental REQUIRED)

# linux needs to explicitly ask for pthreads
if (UNIX AND NOT APPLE)
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)
endif()

# Generate thrift files
yarp_idl_to_dir("${CMAKE_CURRENT_SOURCE_DIR}/thrifts/HumanState.thrift" "${CMAKE_CURRENT_BINARY_DIR}/autogenerated" THRIFT_STATE_SOURCES THRIFT_STATE_HEADERS THRIFT_STATE_INCLUDE_DIRS)
yarp_idl_to_dir("${CMAKE_CURRENT_SOURCE_DIR}/thrifts/HumanStateProviderService.thrift" "${CMAKE_CURRENT_BINARY_DIR}/autogenerated" THRIFT_SERVICE_SOURCES THRIFT_SERVICE_HEADERS THRIFT_SERVICE_INCLUDE_DIRS)

add_library("${PROJECT_NAME}-data" ${THRIFT_STATE_SOURCES} ${THRIFT_STATE_HEADERS} ${THRIFT_SERVICE_SOURCES} ${THRIFT_SERVICE_HEADERS})
target_include_directories("${PROJECT_NAME}-data" SYSTEM PUBLIC ${THRIFT_STATE_INCLUDE_DIRS} ${THRIFT_SERVICE_INCLUDE_DIRS})
target_include_directories("${PROJECT_NAME}-data" SYSTEM PUBLIC ${YARP_INCLUDE_DIRS})
target_link_libraries("${PROJECT_NAME}-data" YARP::YARP_OS YARP::YARP_sig)

install(TARGETS "${PROJECT_NAME}-data"
        RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR})

if (HUMAN_DYNAMICS_ESTIMATION_USE_IPOPT)

  set(SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/HumanStateProvider.cpp
              ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)
  set(HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/HumanStateProvider.h)

  set(PRIVATE_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/HumanStateProviderPrivate.cpp
                      ${CMAKE_CURRENT_SOURCE_DIR}/src/HumanIKWorkerPool.cpp)
  set(PRIVATE_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/private/HumanStateProviderPrivate.h
                      ${CMAKE_CURRENT_SOURCE_DIR}/include/private/HumanIKWorkerPool.h)

  ## Declare a C++ executable
  add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS} ${PRIVATE_SOURCES} ${PRIVATE_HEADERS})

  if (UNIX AND NOT APPLE)
    target_link_libraries(${PROJECT_NAME} Threads::Threads)
  endif()

  if (HUMAN_DYNAMICS_ESTIMATION_DEBUG_MALLOC)
    target_compile_definitions(${PROJECT_NAME} PRIVATE "$<$<CONFIG:Debug>:EIGEN_RUNTIME_NO_MALLOC>")
  endif()

  target_compile_features(${PROJECT_NAME} PRIVATE cxx_auto_type
                                                  cxx_lambdas
                                                  cxx_range_for)

  source_group("Private\\Header Files" FILES ${PRIVATE_HEADERS})
  source_group("Private\\SourceFiles" FILES ${PRIVATE_SOURCES})

  target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
  target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/private)
  target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${YARP_INCLUDE_DIRS})

  ## Specify targets for the linkage
  target_link_libraries(${PROJECT_NAME} "${PROJECT_NAME}-data"
                                        human-ik
                                        YARP::yarp_experimental
                                        YARP::YARP_OS
                                        YARP::YARP_init
                                        YARP::YARP_dev
                                        iDynTree::idyntree-core
                                        iDynTree::idyntree-model)

  add_warnings_configuration_to_target(TARGETS ${PROJECT_NAME} PRIVATE)

  yarp_install(FILES conf/human-state-provider.ini
               DESTINATION ${YARP_CONTEXTS_INSTALL_DIR}/human-dynamic-estimation)

  install(TARGETS ${PROJECT_NAME}
          RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR}
          ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
          LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR})

endif()

