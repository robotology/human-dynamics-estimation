<launch>
    <group ns="HumanGroup">
        <arg name="Human"/>
        <arg name="gui" default="False"/>
        <arg name="vel" default="True"/>
        <arg name="eff" default="True"/>
        <arg name="humanModel" default="$(find HDERviz)/urdfs/humanSubject03_66dof.urdf"/>
        <arg name="rvizconfig" default="$(find HDERviz)/rviz/HDERviz.rviz" />

        <param name="robot_description" command="$(find xacro)/xacro.py $(arg humanModel)" />
        <param name="use_gui" value="$(arg gui)"/>

        <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

        <!-- Configure the robot_state_publisher node -->
        <!-- This is the old method. Now we use the idyntree module -->
        <!--
              yarprobotstatepublisher - -tfPrefix /Human/ - -model humanSubject01_66dof.urdf
                  - -base-frame Pelvis - -jointstates-topic "/Human/joint_states"
        -->
    </group>
    <group ns="RobotGroup">
        <arg name="Robot" />
        <arg name="gui" default="False" />
        <arg name="vel" default="True" />
        <arg name="eff" default="True"/>
	<arg name="YARP_ROBOT_NAME" default="$(env YARP_ROBOT_NAME)"/>
        <arg name="robotModel" default="$(find iCub)/robots/$(arg YARP_ROBOT_NAME)/model.urdf"/>

        <param name="use_gui" value="$(arg gui)"/>
        <param name="robot_description" command="$(find xacro)/xacro $(arg robotModel)" />

        <param name="tf_prefix" value="robot" type="str"/>
    </group>
</launch>
